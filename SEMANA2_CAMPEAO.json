{"id":"50aee98b-ab7f-4adf-aae0-c60efc6aa4dd","data":{"nodes":[{"id":"File-Lv4aN","type":"genericNode","position":{"x":-1033.2534241782762,"y":-8.032878150574646},"data":{"type":"File","node":{"template":{"_type":"Component","path":{"trace_as_metadata":true,"file_path":"e0b91430-c4e0-4cca-bcb8-ede1643c8f6d\\cosmos.pdf","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx"],"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"path","display_name":"Path","advanced":false,"dynamic":false,"info":"Supported file types: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx","title_case":false,"type":"file"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from pathlib import Path\n\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parse_text_file_to_data\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, FileInput, Output\nfrom langflow.schema import Data\n\n\nclass FileComponent(Component):\n    display_name = \"File\"\n    description = \"A generic file loader.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    inputs = [\n        FileInput(\n            name=\"path\",\n            display_name=\"Path\",\n            file_types=TEXT_FILE_TYPES,\n            info=f\"Supported file types: {', '.join(TEXT_FILE_TYPES)}\",\n        ),\n        BoolInput(\n            name=\"silent_errors\",\n            display_name=\"Silent Errors\",\n            advanced=True,\n            info=\"If true, errors will not raise an exception.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"load_file\"),\n    ]\n\n    def load_file(self) -> Data:\n        if not self.path:\n            raise ValueError(\"Please, upload a file to use this component.\")\n        resolved_path = self.resolve_path(self.path)\n        silent_errors = self.silent_errors\n\n        extension = Path(resolved_path).suffix[1:].lower()\n\n        if extension == \"doc\":\n            raise ValueError(\"doc files are not supported. Please save as .docx\")\n        if extension not in TEXT_FILE_TYPES:\n            raise ValueError(f\"Unsupported file type: {extension}\")\n\n        data = parse_text_file_to_data(resolved_path, silent_errors)\n        self.status = data if data else \"No data\"\n        return data or Data()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"silent_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"silent_errors","display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"If true, errors will not raise an exception.","title_case":false,"type":"bool"}},"description":"A generic file loader.","icon":"file-text","base_classes":["Data"],"display_name":"File","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":true,"outputs":[{"types":["Data"],"selected":"Data","name":"data","display_name":"Data","method":"load_file","value":"__UNDEFINED__","cache":true,"hidden":false}],"field_order":["path","silent_errors"],"beta":false,"edited":false},"id":"File-Lv4aN"},"selected":false,"width":384,"height":309,"positionAbsolute":{"x":-1033.2534241782762,"y":-8.032878150574646},"dragging":false},{"id":"Chroma-8H72t","type":"genericNode","position":{"x":1149.867940470894,"y":566.0409384744117},"data":{"type":"Chroma","node":{"template":{"_type":"Component","embedding":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"embedding","display_name":"Embedding","advanced":false,"input_types":["Embeddings"],"dynamic":false,"info":"","title_case":false,"type":"other"},"ingest_data":{"trace_as_input":true,"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"ingest_data","display_name":"Ingest Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other"},"allow_duplicates":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"allow_duplicates","display_name":"Allow Duplicates","advanced":true,"dynamic":false,"info":"If false, will not add documents that are already in the Vector Store.","title_case":false,"type":"bool"},"chroma_server_cors_allow_origins":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"chroma_server_cors_allow_origins","display_name":"Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"chroma_server_grpc_port":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"chroma_server_grpc_port","display_name":"Server gRPC Port","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int"},"chroma_server_host":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"chroma_server_host","display_name":"Server Host","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"chroma_server_http_port":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"chroma_server_http_port","display_name":"Server HTTP Port","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int"},"chroma_server_ssl_enabled":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"chroma_server_ssl_enabled","display_name":"Server SSL Enabled","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool"},"clear_database_before_ingest":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"clear_database_before_ingest","display_name":"Clear Database Before Ingest","advanced":true,"dynamic":false,"info":"If true, will clear the database before ingesting new data.","title_case":false,"type":"bool"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from copy import deepcopy\r\nfrom typing import TYPE_CHECKING\r\n\r\nfrom chromadb.config import Settings\r\nfrom langchain_chroma.vectorstores import Chroma\r\nfrom loguru import logger\r\n\r\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent\r\nfrom langflow.base.vectorstores.utils import chroma_collection_to_data\r\nfrom langflow.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\r\nfrom langflow.schema import Data\r\n\r\nif TYPE_CHECKING:\r\n    from langchain_chroma import Chroma\r\n\r\n\r\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\r\n    \"\"\"\r\n    Chroma Vector Store with search capabilities\r\n    \"\"\"\r\n\r\n    display_name: str = \"Chroma DB\"\r\n    description: str = \"Chroma Vector Store with search capabilities\"\r\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\r\n    name = \"Chroma\"\r\n    icon = \"Chroma\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"collection_name\",\r\n            display_name=\"Collection Name\",\r\n            value=\"langflow\",\r\n        ),\r\n        StrInput(\r\n            name=\"persist_directory\",\r\n            display_name=\"Persist Directory\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"search_query\",\r\n            display_name=\"Search Query\",\r\n        ),\r\n        DataInput(\r\n            name=\"ingest_data\",\r\n            display_name=\"Ingest Data\",\r\n            is_list=True,\r\n        ),\r\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\r\n        StrInput(\r\n            name=\"chroma_server_cors_allow_origins\",\r\n            display_name=\"Server CORS Allow Origins\",\r\n            advanced=True,\r\n        ),\r\n        StrInput(\r\n            name=\"chroma_server_host\",\r\n            display_name=\"Server Host\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"chroma_server_http_port\",\r\n            display_name=\"Server HTTP Port\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"chroma_server_grpc_port\",\r\n            display_name=\"Server gRPC Port\",\r\n            advanced=True,\r\n        ),\r\n        BoolInput(\r\n            name=\"chroma_server_ssl_enabled\",\r\n            display_name=\"Server SSL Enabled\",\r\n            advanced=True,\r\n        ),\r\n        BoolInput(\r\n            name=\"allow_duplicates\",\r\n            display_name=\"Allow Duplicates\",\r\n            advanced=True,\r\n            info=\"If false, will not add documents that are already in the Vector Store.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"clear_database_before_ingest\",\r\n            display_name=\"Clear Database Before Ingest\",\r\n            advanced=True,\r\n            info=\"If true, will clear the database before ingesting new data.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"search_type\",\r\n            display_name=\"Search Type\",\r\n            options=[\"Similarity\", \"MMR\"],\r\n            value=\"Similarity\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"number_of_results\",\r\n            display_name=\"Number of Results\",\r\n            info=\"Number of results to return.\",\r\n            advanced=True,\r\n            value=10,\r\n        ),\r\n        IntInput(\r\n            name=\"limit\",\r\n            display_name=\"Limit\",\r\n            advanced=True,\r\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\r\n        ),\r\n    ]\r\n\r\n    def build_vector_store(self) -> Chroma:\r\n        \"\"\"\r\n        Builds the Chroma object.\r\n        \"\"\"\r\n        try:\r\n            from chromadb import Client\r\n            from langchain_chroma import Chroma\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\r\n            )\r\n        # Chroma settings\r\n        chroma_settings = None\r\n        client = None\r\n        if self.chroma_server_host:\r\n            chroma_settings = Settings(\r\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\r\n                chroma_server_host=self.chroma_server_host,\r\n                chroma_server_http_port=self.chroma_server_http_port or None,\r\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\r\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\r\n            )\r\n            client = Client(settings=chroma_settings)\r\n\r\n        # Check persist_directory and expand it if it is a relative path\r\n        if self.persist_directory is not None:\r\n            persist_directory = self.resolve_path(self.persist_directory)\r\n        else:\r\n            persist_directory = None\r\n\r\n        chroma = Chroma(\r\n            persist_directory=persist_directory,\r\n            client=client,\r\n            embedding_function=self.embedding,\r\n            collection_name=self.collection_name,\r\n        )\r\n\r\n        if self.clear_database_before_ingest:\r\n            chroma.reset()\r\n\r\n        self._add_documents_to_vector_store(chroma)\r\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\r\n        return chroma\r\n\r\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\r\n        \"\"\"\r\n        Adds documents to the Vector Store.\r\n        \"\"\"\r\n        if not self.ingest_data:\r\n            self.status = \"\"\r\n            return\r\n\r\n        _stored_documents_without_id = []\r\n        if self.allow_duplicates:\r\n            stored_data = []\r\n        else:\r\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\r\n            for value in deepcopy(stored_data):\r\n                del value.id\r\n                _stored_documents_without_id.append(value)\r\n\r\n        documents = []\r\n        for _input in self.ingest_data or []:\r\n            if isinstance(_input, Data):\r\n                if _input not in _stored_documents_without_id:\r\n                    documents.append(_input.to_lc_document())\r\n            else:\r\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\r\n\r\n        if documents and self.embedding is not None:\r\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\r\n            vector_store.add_documents(documents)\r\n        else:\r\n            logger.debug(\"No documents to add to the Vector Store.\")\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"collection_name":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"langflow7","name":"collection_name","display_name":"Collection Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"limit":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"limit","display_name":"Limit","advanced":true,"dynamic":false,"info":"Limit the number of records to compare when Allow Duplicates is False.","title_case":false,"type":"int"},"number_of_results":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"10","name":"number_of_results","display_name":"Number of Results","advanced":true,"dynamic":false,"info":"Number of results to return.","title_case":false,"type":"int"},"persist_directory":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"chrama_data","name":"persist_directory","display_name":"Persist Directory","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"search_query":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"search_query","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"search_type":{"trace_as_metadata":true,"options":["Similarity","MMR"],"required":false,"placeholder":"","show":true,"value":"Similarity","name":"search_type","display_name":"Search Type","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"}},"description":"Chroma Vector Store with search capabilities","icon":"Chroma","base_classes":["Data","Retriever","VectorStore"],"display_name":"Chroma DB","documentation":"https://python.langchain.com/docs/integrations/vectorstores/chroma","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Retriever"],"selected":"Retriever","name":"base_retriever","display_name":"Retriever","method":"build_base_retriever","value":"__UNDEFINED__","cache":true},{"types":["Data"],"selected":"Data","name":"search_results","display_name":"Search Results","method":"search_documents","value":"__UNDEFINED__","cache":true},{"types":["VectorStore"],"selected":"VectorStore","name":"vector_store","display_name":"Vector Store","method":"cast_vector_store","value":"__UNDEFINED__","cache":true}],"field_order":["collection_name","persist_directory","search_query","ingest_data","embedding","chroma_server_cors_allow_origins","chroma_server_host","chroma_server_http_port","chroma_server_grpc_port","chroma_server_ssl_enabled","allow_duplicates","clear_database_before_ingest","search_type","number_of_results","limit"],"beta":false,"edited":true},"id":"Chroma-8H72t","description":"Chroma Vector Store with search capabilities","display_name":"Chroma DB"},"selected":false,"width":384,"height":713,"positionAbsolute":{"x":1149.867940470894,"y":566.0409384744117},"dragging":false},{"id":"ChatInput-oOdRG","type":"genericNode","position":{"x":1911.4651170110108,"y":25.98635216228169},"data":{"type":"ChatInput","node":{"template":{"_type":"Component","files":{"trace_as_metadata":true,"file_path":"","fileTypes":["txt","md","mdx","csv","json","yaml","yml","xml","html","htm","pdf","docx","py","sh","sql","js","ts","tsx","jpg","jpeg","png","bmp","image"],"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"files","display_name":"Files","advanced":true,"dynamic":false,"info":"Files to be sent with the message.","title_case":false,"type":"file","_input_type":"FileInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_NAME_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"ChatInput\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n        )\n\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as input.","title_case":false,"type":"str","_input_type":"MultilineInput"},"sender":{"combobox":false,"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"User","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"User","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"should_store_message","display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Get chat inputs from the Playground.","icon":"ChatInput","base_classes":["Message"],"display_name":"Chat Input","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","files"],"beta":false,"edited":false},"id":"ChatInput-oOdRG","description":"Get chat inputs from the Playground.","display_name":"Chat Input"},"selected":false,"width":384,"height":317,"positionAbsolute":{"x":1911.4651170110108,"y":25.98635216228169},"dragging":false},{"id":"Chroma-en1gy","type":"genericNode","position":{"x":-0.32752489237952886,"y":-288.1057710462163},"data":{"type":"Chroma","node":{"template":{"_type":"Component","embedding":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"embedding","display_name":"Embedding","advanced":false,"input_types":["Embeddings"],"dynamic":false,"info":"","title_case":false,"type":"other"},"ingest_data":{"trace_as_input":true,"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"ingest_data","display_name":"Ingest Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"","title_case":false,"type":"other"},"allow_duplicates":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"allow_duplicates","display_name":"Allow Duplicates","advanced":true,"dynamic":false,"info":"If false, will not add documents that are already in the Vector Store.","title_case":false,"type":"bool"},"chroma_server_cors_allow_origins":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"chroma_server_cors_allow_origins","display_name":"Server CORS Allow Origins","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"chroma_server_grpc_port":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"chroma_server_grpc_port","display_name":"Server gRPC Port","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int"},"chroma_server_host":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"chroma_server_host","display_name":"Server Host","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"chroma_server_http_port":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"chroma_server_http_port","display_name":"Server HTTP Port","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int"},"chroma_server_ssl_enabled":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"chroma_server_ssl_enabled","display_name":"Server SSL Enabled","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool"},"clear_database_before_ingest":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"clear_database_before_ingest","display_name":"Clear Database Before Ingest","advanced":true,"dynamic":false,"info":"If true, will clear the database before ingesting new data.","title_case":false,"type":"bool"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from copy import deepcopy\r\nfrom typing import TYPE_CHECKING\r\n\r\nfrom chromadb.config import Settings\r\nfrom langchain_chroma.vectorstores import Chroma\r\nfrom loguru import logger\r\n\r\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent\r\nfrom langflow.base.vectorstores.utils import chroma_collection_to_data\r\nfrom langflow.io import BoolInput, DataInput, DropdownInput, HandleInput, IntInput, StrInput, MultilineInput\r\nfrom langflow.schema import Data\r\n\r\nif TYPE_CHECKING:\r\n    from langchain_chroma import Chroma\r\n\r\n\r\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\r\n    \"\"\"\r\n    Chroma Vector Store with search capabilities\r\n    \"\"\"\r\n\r\n    display_name: str = \"Chroma DB\"\r\n    description: str = \"Chroma Vector Store with search capabilities\"\r\n    documentation = \"https://python.langchain.com/docs/integrations/vectorstores/chroma\"\r\n    name = \"Chroma\"\r\n    icon = \"Chroma\"\r\n\r\n    inputs = [\r\n        StrInput(\r\n            name=\"collection_name\",\r\n            display_name=\"Collection Name\",\r\n            value=\"langflow\",\r\n        ),\r\n        StrInput(\r\n            name=\"persist_directory\",\r\n            display_name=\"Persist Directory\",\r\n        ),\r\n        MultilineInput(\r\n            name=\"search_query\",\r\n            display_name=\"Search Query\",\r\n        ),\r\n        DataInput(\r\n            name=\"ingest_data\",\r\n            display_name=\"Ingest Data\",\r\n            is_list=True,\r\n        ),\r\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\r\n        StrInput(\r\n            name=\"chroma_server_cors_allow_origins\",\r\n            display_name=\"Server CORS Allow Origins\",\r\n            advanced=True,\r\n        ),\r\n        StrInput(\r\n            name=\"chroma_server_host\",\r\n            display_name=\"Server Host\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"chroma_server_http_port\",\r\n            display_name=\"Server HTTP Port\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"chroma_server_grpc_port\",\r\n            display_name=\"Server gRPC Port\",\r\n            advanced=True,\r\n        ),\r\n        BoolInput(\r\n            name=\"chroma_server_ssl_enabled\",\r\n            display_name=\"Server SSL Enabled\",\r\n            advanced=True,\r\n        ),\r\n        BoolInput(\r\n            name=\"allow_duplicates\",\r\n            display_name=\"Allow Duplicates\",\r\n            advanced=True,\r\n            info=\"If false, will not add documents that are already in the Vector Store.\",\r\n        ),\r\n        BoolInput(\r\n            name=\"clear_database_before_ingest\",\r\n            display_name=\"Clear Database Before Ingest\",\r\n            advanced=True,\r\n            info=\"If true, will clear the database before ingesting new data.\",\r\n        ),\r\n        DropdownInput(\r\n            name=\"search_type\",\r\n            display_name=\"Search Type\",\r\n            options=[\"Similarity\", \"MMR\"],\r\n            value=\"Similarity\",\r\n            advanced=True,\r\n        ),\r\n        IntInput(\r\n            name=\"number_of_results\",\r\n            display_name=\"Number of Results\",\r\n            info=\"Number of results to return.\",\r\n            advanced=True,\r\n            value=10,\r\n        ),\r\n        IntInput(\r\n            name=\"limit\",\r\n            display_name=\"Limit\",\r\n            advanced=True,\r\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\r\n        ),\r\n    ]\r\n\r\n    def build_vector_store(self) -> Chroma:\r\n        \"\"\"\r\n        Builds the Chroma object.\r\n        \"\"\"\r\n        try:\r\n            from chromadb import Client\r\n            from langchain_chroma import Chroma\r\n        except ImportError:\r\n            raise ImportError(\r\n                \"Could not import Chroma integration package. \" \"Please install it with `pip install langchain-chroma`.\"\r\n            )\r\n        # Chroma settings\r\n        chroma_settings = None\r\n        client = None\r\n        if self.chroma_server_host:\r\n            chroma_settings = Settings(\r\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\r\n                chroma_server_host=self.chroma_server_host,\r\n                chroma_server_http_port=self.chroma_server_http_port or None,\r\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\r\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\r\n            )\r\n            client = Client(settings=chroma_settings)\r\n\r\n        # Check persist_directory and expand it if it is a relative path\r\n        if self.persist_directory is not None:\r\n            persist_directory = self.resolve_path(self.persist_directory)\r\n        else:\r\n            persist_directory = None\r\n\r\n        chroma = Chroma(\r\n            persist_directory=persist_directory,\r\n            client=client,\r\n            embedding_function=self.embedding,\r\n            collection_name=self.collection_name,\r\n        )\r\n\r\n        if self.clear_database_before_ingest:\r\n            chroma.reset()\r\n\r\n        self._add_documents_to_vector_store(chroma)\r\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\r\n        return chroma\r\n\r\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\r\n        \"\"\"\r\n        Adds documents to the Vector Store.\r\n        \"\"\"\r\n        if not self.ingest_data:\r\n            self.status = \"\"\r\n            return\r\n\r\n        _stored_documents_without_id = []\r\n        if self.allow_duplicates:\r\n            stored_data = []\r\n        else:\r\n            stored_data = chroma_collection_to_data(vector_store.get(self.limit))\r\n            for value in deepcopy(stored_data):\r\n                del value.id\r\n                _stored_documents_without_id.append(value)\r\n\r\n        documents = []\r\n        for _input in self.ingest_data or []:\r\n            if isinstance(_input, Data):\r\n                if _input not in _stored_documents_without_id:\r\n                    documents.append(_input.to_lc_document())\r\n            else:\r\n                raise ValueError(\"Vector Store Inputs must be Data objects.\")\r\n\r\n        if documents and self.embedding is not None:\r\n            logger.debug(f\"Adding {len(documents)} documents to the Vector Store.\")\r\n            vector_store.add_documents(documents)\r\n        else:\r\n            logger.debug(\"No documents to add to the Vector Store.\")\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"collection_name":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"langflow7","name":"collection_name","display_name":"Collection Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"limit":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"limit","display_name":"Limit","advanced":true,"dynamic":false,"info":"Limit the number of records to compare when Allow Duplicates is False.","title_case":false,"type":"int"},"number_of_results":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":10,"name":"number_of_results","display_name":"Number of Results","advanced":true,"dynamic":false,"info":"Number of results to return.","title_case":false,"type":"int"},"persist_directory":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"chrama_data","name":"persist_directory","display_name":"Persist Directory","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str"},"search_query":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"search_query","display_name":"Search Query","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str"},"search_type":{"trace_as_metadata":true,"options":["Similarity","MMR"],"required":false,"placeholder":"","show":true,"value":"Similarity","name":"search_type","display_name":"Search Type","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"}},"description":"Chroma Vector Store with search capabilities","icon":"Chroma","base_classes":["Data","Retriever","VectorStore"],"display_name":"Chroma DB","documentation":"https://python.langchain.com/docs/integrations/vectorstores/chroma","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Retriever"],"selected":"Retriever","name":"base_retriever","display_name":"Retriever","method":"build_base_retriever","value":"__UNDEFINED__","cache":true},{"types":["Data"],"selected":"Data","name":"search_results","display_name":"Search Results","method":"search_documents","value":"__UNDEFINED__","cache":true},{"types":["VectorStore"],"selected":"VectorStore","name":"vector_store","display_name":"Vector Store","method":"cast_vector_store","value":"__UNDEFINED__","cache":true}],"field_order":["collection_name","persist_directory","search_query","ingest_data","embedding","chroma_server_cors_allow_origins","chroma_server_host","chroma_server_http_port","chroma_server_grpc_port","chroma_server_ssl_enabled","allow_duplicates","clear_database_before_ingest","search_type","number_of_results","limit"],"beta":false,"edited":true},"id":"Chroma-en1gy","description":"Chroma Vector Store with search capabilities","display_name":"Chroma DB"},"selected":false,"width":384,"height":713,"positionAbsolute":{"x":-0.32752489237952886,"y":-288.1057710462163},"dragging":false},{"id":"OpenAIEmbeddings-iXkjv","type":"genericNode","position":{"x":-503.4895901454705,"y":241.47053114930708},"data":{"type":"OpenAIEmbeddings","node":{"template":{"_type":"Component","chunk_size":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1000,"name":"chunk_size","display_name":"Chunk Size","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"client":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"client","display_name":"Client","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"default_headers":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"default_headers","display_name":"Default Headers","advanced":true,"dynamic":false,"info":"Default headers to use for the API request.","title_case":false,"type":"dict","_input_type":"DictInput"},"default_query":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"default_query","display_name":"Default Query","advanced":true,"dynamic":false,"info":"Default query parameters to use for the API request.","title_case":false,"type":"dict","_input_type":"DictInput"},"deployment":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"deployment","display_name":"Deployment","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"dimensions":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"dimensions","display_name":"Dimensions","advanced":true,"dynamic":false,"info":"The number of dimensions the resulting output embeddings should have. Only supported by certain models.","title_case":false,"type":"int","_input_type":"IntInput"},"embedding_ctx_length":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1536,"name":"embedding_ctx_length","display_name":"Embedding Context Length","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"max_retries":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":3,"name":"max_retries","display_name":"Max Retries","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"model":{"combobox":false,"trace_as_metadata":true,"options":["text-embedding-3-small","text-embedding-3-large","text-embedding-ada-002"],"required":false,"placeholder":"","show":true,"value":"text-embedding-3-large","name":"model","display_name":"Model","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput","load_from_db":false},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"openai_api_base":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"openai_api_key":{"load_from_db":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"openai_api_type":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_type","display_name":"OpenAI API Type","advanced":true,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"openai_api_version":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_version","display_name":"OpenAI API Version","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"openai_organization":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_organization","display_name":"OpenAI Organization","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"openai_proxy":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_proxy","display_name":"OpenAI Proxy","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"request_timeout":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"request_timeout","display_name":"Request Timeout","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput"},"show_progress_bar":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"show_progress_bar","display_name":"Show Progress Bar","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"skip_empty":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"skip_empty","display_name":"Skip Empty","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"tiktoken_enable":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"tiktoken_enable","display_name":"TikToken Enable","advanced":true,"dynamic":false,"info":"If False, you must have transformers installed.","title_case":false,"type":"bool","_input_type":"BoolInput"},"tiktoken_model_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"tiktoken_model_name","display_name":"TikToken Model Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Generate embeddings using OpenAI models.","icon":"OpenAI","base_classes":["Embeddings"],"display_name":"OpenAI Embeddings","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Embeddings"],"selected":"Embeddings","name":"embeddings","display_name":"Embeddings","method":"build_embeddings","value":"__UNDEFINED__","cache":true}],"field_order":["default_headers","default_query","chunk_size","client","deployment","embedding_ctx_length","max_retries","model","model_kwargs","openai_api_base","openai_api_key","openai_api_type","openai_api_version","openai_organization","openai_proxy","request_timeout","show_progress_bar","skip_empty","tiktoken_model_name","tiktoken_enable","dimensions"],"beta":false,"edited":false},"id":"OpenAIEmbeddings-iXkjv","description":"Generate embeddings using OpenAI models.","display_name":"OpenAI Embeddings"},"selected":false,"width":384,"height":403,"positionAbsolute":{"x":-503.4895901454705,"y":241.47053114930708},"dragging":false},{"id":"ParseData-qe6th","type":"genericNode","position":{"x":1617.8460244713176,"y":560.7261072269704},"data":{"type":"ParseData","node":{"template":{"_type":"Component","data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"data","display_name":"Data","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to convert to text.","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Parse Data\"\n    description = \"Convert Data into plain text following a specified template.\"\n    icon = \"braces\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\"),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text\", method=\"parse_data\"),\n    ]\n\n    def parse_data(self) -> Message:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n\n        result_string = data_to_text(template, data, sep=self.sep)\n        self.status = result_string\n        return Message(text=result_string)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"sep":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\n","name":"sep","display_name":"Separator","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"str"},"template":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"template","display_name":"Template","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.","title_case":false,"type":"str"}},"description":"Convert Data into plain text following a specified template.","icon":"braces","base_classes":["Message"],"display_name":"Parse Data","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text","display_name":"Text","method":"parse_data","value":"__UNDEFINED__","cache":true}],"field_order":["data","template","sep"],"beta":false,"edited":false},"id":"ParseData-qe6th"},"selected":false,"width":384,"height":401,"positionAbsolute":{"x":1617.8460244713176,"y":560.7261072269704},"dragging":false},{"id":"ChatOutput-bIIcV","type":"genericNode","position":{"x":3401.3943369545527,"y":542.3008528112692},"data":{"type":"ChatOutput","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.memory import store_message\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER, MESSAGE_SENDER_AI\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n        )\n        if (\n            self.session_id\n            and isinstance(message, Message)\n            and isinstance(message.text, str)\n            and self.should_store_message\n        ):\n            store_message(\n                message,\n                flow_id=self.graph.flow_id,\n            )\n            self.message.value = message\n\n        self.status = message\n        return message\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"data_template":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{text}","name":"data_template","display_name":"Data Template","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Text","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Message to be passed as output.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"sender":{"combobox":false,"trace_as_metadata":true,"options":["Machine","User"],"required":false,"placeholder":"","show":true,"value":"Machine","name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"Type of sender.","title_case":false,"type":"str","_input_type":"DropdownInput"},"sender_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"AI","name":"sender_name","display_name":"Sender Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Name of the sender.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"session_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"session_id","display_name":"Session ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The session ID of the chat. If empty, the current session ID parameter will be used.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"should_store_message":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"should_store_message","display_name":"Store Messages","advanced":true,"dynamic":false,"info":"Store the message in the history.","title_case":false,"type":"bool","_input_type":"BoolInput"}},"description":"Display a chat message in the Playground.","icon":"ChatOutput","base_classes":["Message"],"display_name":"Chat Output","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"message","display_name":"Message","method":"message_response","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","should_store_message","sender","sender_name","session_id","data_template"],"beta":false,"edited":false},"id":"ChatOutput-bIIcV","description":"Display a chat message in the Playground.","display_name":"Chat Output"},"selected":false,"width":384,"height":317,"positionAbsolute":{"x":3401.3943369545527,"y":542.3008528112692},"dragging":false},{"id":"Prompt-z2aEz","type":"genericNode","position":{"x":2056.8207344319103,"y":554.6827871122708},"data":{"type":"Prompt","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.io import Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(\n        self,\n    ) -> Message:\n        prompt = await Message.from_template_and_variables(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def post_code_processing(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"\n        This function is called after the code validation is done.\n        \"\"\"\n        frontend_node = super().post_code_processing(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":"Context: {context}\n\nInstructions:\n\nYou are an efficient and careful RAG assistant.\n\nYour role is to *give a state of the art answer for the question bellow based on the context above*\n\nRead the question carefully and try to understand correctly the nuanced information it’s waiting for.\n\nIn some cases the nature of question will demand a concise answer. In other cases you’ll have to bring more information.\n\nYour goal is to give the best answer in all aspects that it will be evaluated: Correctness, precision, consistency with context, your capacity to summarize all the necessary information in a short answer.\n\nRead the context again to extract the best answer from it.\n\nBefore deliver the answer, ask your self to improve one more time. Always based on given context, question and this instructions.\n\nIf the context doesn’t have the necessary information to answer to question just answer <no way to answer>\n\nQuestion: {question}\n\n","name":"template","display_name":"Template","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"prompt"},"context":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"context","display_name":"context","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"question":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"question","display_name":"question","advanced":false,"input_types":["Message","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["Message"],"name":"","display_name":"Prompt","documentation":"","custom_fields":{"template":["context","question"]},"output_types":[],"full_path":null,"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"prompt","hidden":null,"display_name":"Prompt Message","method":"build_prompt","value":"__UNDEFINED__","cache":true}],"field_order":["template"],"beta":false,"error":null,"edited":false},"id":"Prompt-z2aEz","description":"Create a prompt template with dynamic variables.","display_name":"Prompt"},"selected":false,"width":384,"height":525,"positionAbsolute":{"x":2056.8207344319103,"y":554.6827871122708},"dragging":false},{"id":"OpenAIEmbeddings-eNpUU","type":"genericNode","position":{"x":684.9854804015179,"y":564.2872689121043},"data":{"type":"OpenAIEmbeddings","node":{"template":{"_type":"Component","chunk_size":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1000,"name":"chunk_size","display_name":"Chunk Size","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"client":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"client","display_name":"Client","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_openai.embeddings.base import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\"),\n        SecretStrInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            tiktoken_enabled=self.tiktoken_enable,\n            default_headers=self.default_headers,\n            default_query=self.default_query,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            deployment=self.deployment,\n            embedding_ctx_length=self.embedding_ctx_length,\n            max_retries=self.max_retries,\n            model=self.model,\n            model_kwargs=self.model_kwargs,\n            base_url=self.openai_api_base,\n            api_key=self.openai_api_key,\n            openai_api_type=self.openai_api_type,\n            api_version=self.openai_api_version,\n            organization=self.openai_organization,\n            openai_proxy=self.openai_proxy,\n            timeout=self.request_timeout or None,\n            show_progress_bar=self.show_progress_bar,\n            skip_empty=self.skip_empty,\n            tiktoken_model_name=self.tiktoken_model_name,\n            dimensions=self.dimensions or None,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"default_headers":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"default_headers","display_name":"Default Headers","advanced":true,"dynamic":false,"info":"Default headers to use for the API request.","title_case":false,"type":"dict","_input_type":"DictInput"},"default_query":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"default_query","display_name":"Default Query","advanced":true,"dynamic":false,"info":"Default query parameters to use for the API request.","title_case":false,"type":"dict","_input_type":"DictInput"},"deployment":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"deployment","display_name":"Deployment","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"dimensions":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"dimensions","display_name":"Dimensions","advanced":true,"dynamic":false,"info":"The number of dimensions the resulting output embeddings should have. Only supported by certain models.","title_case":false,"type":"int","_input_type":"IntInput"},"embedding_ctx_length":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1536,"name":"embedding_ctx_length","display_name":"Embedding Context Length","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"max_retries":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":3,"name":"max_retries","display_name":"Max Retries","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"int","_input_type":"IntInput"},"model":{"combobox":false,"trace_as_metadata":true,"options":["text-embedding-3-small","text-embedding-3-large","text-embedding-ada-002"],"required":false,"placeholder":"","show":true,"value":"text-embedding-3-large","name":"model","display_name":"Model","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput","load_from_db":false},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"openai_api_base":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"openai_api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"openai_api_type":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_type","display_name":"OpenAI API Type","advanced":true,"input_types":[],"dynamic":false,"info":"","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"openai_api_version":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_version","display_name":"OpenAI API Version","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"openai_organization":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_organization","display_name":"OpenAI Organization","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"openai_proxy":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_proxy","display_name":"OpenAI Proxy","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"},"request_timeout":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"request_timeout","display_name":"Request Timeout","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput"},"show_progress_bar":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"show_progress_bar","display_name":"Show Progress Bar","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"skip_empty":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"skip_empty","display_name":"Skip Empty","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"bool","_input_type":"BoolInput"},"tiktoken_enable":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"tiktoken_enable","display_name":"TikToken Enable","advanced":true,"dynamic":false,"info":"If False, you must have transformers installed.","title_case":false,"type":"bool","_input_type":"BoolInput"},"tiktoken_model_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"tiktoken_model_name","display_name":"TikToken Model Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Generate embeddings using OpenAI models.","icon":"OpenAI","base_classes":["Embeddings"],"display_name":"OpenAI Embeddings","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Embeddings"],"selected":"Embeddings","name":"embeddings","display_name":"Embeddings","method":"build_embeddings","value":"__UNDEFINED__","cache":true}],"field_order":["default_headers","default_query","chunk_size","client","deployment","embedding_ctx_length","max_retries","model","model_kwargs","openai_api_base","openai_api_key","openai_api_type","openai_api_version","openai_organization","openai_proxy","request_timeout","show_progress_bar","skip_empty","tiktoken_model_name","tiktoken_enable","dimensions"],"beta":false,"edited":false},"id":"OpenAIEmbeddings-eNpUU","description":"Generate embeddings using OpenAI models.","display_name":"OpenAI Embeddings"},"selected":false,"width":384,"height":403,"positionAbsolute":{"x":684.9854804015179,"y":564.2872689121043},"dragging":false},{"id":"OpenAIModel-XithD","type":"genericNode","position":{"x":2526.323037290282,"y":545.9205179621795},"data":{"type":"OpenAIModel","node":{"template":{"_type":"Component","api_key":{"load_from_db":true,"required":false,"placeholder":"","show":true,"value":"","name":"api_key","display_name":"OpenAI API Key","advanced":false,"input_types":[],"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","title_case":false,"password":true,"type":"str","_input_type":"SecretStrInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import operator\nfrom functools import reduce\n\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = LCModelComponent._base_inputs + [\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DictInput(\n            name=\"output_schema\",\n            is_list=True,\n            display_name=\"Schema\",\n            advanced=True,\n            info=\"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n        ),\n        FloatInput(name=\"temperature\", display_name=\"Temperature\", value=0.1),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        # self.output_schema is a list of dictionaries\n        # let's convert it to a dictionary\n        output_schema_dict: dict[str, str] = reduce(operator.ior, self.output_schema or {}, {})\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = bool(output_schema_dict) or self.json_mode\n        seed = self.seed\n\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature or 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            if output_schema_dict:\n                output = output.with_structured_output(schema=output_schema_dict, method=\"json_mode\")  # type: ignore\n            else:\n                output = output.bind(response_format={\"type\": \"json_object\"})  # type: ignore\n\n        return output  # type: ignore\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"\n        Get a message from an OpenAI exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")  # type: ignore\n            if message:\n                return message\n        return\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"MessageInput"},"json_mode":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"json_mode","display_name":"JSON Mode","advanced":true,"dynamic":false,"info":"If True, it will output JSON regardless of passing a schema.","title_case":false,"type":"bool","_input_type":"BoolInput"},"max_tokens":{"trace_as_metadata":true,"range_spec":{"step_type":"float","min":0,"max":128000,"step":0.1},"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"max_tokens","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","title_case":false,"type":"int","_input_type":"IntInput"},"model_kwargs":{"trace_as_input":true,"list":false,"required":false,"placeholder":"","show":true,"value":{},"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":false,"type":"dict","_input_type":"DictInput"},"model_name":{"combobox":false,"trace_as_metadata":true,"options":["gpt-4o-mini","gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-4","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"required":false,"placeholder":"","show":true,"value":"gpt-4o","name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"str","_input_type":"DropdownInput"},"openai_api_base":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":false,"type":"str","_input_type":"StrInput"},"output_schema":{"trace_as_input":true,"list":true,"required":false,"placeholder":"","show":true,"value":{},"name":"output_schema","display_name":"Schema","advanced":true,"dynamic":false,"info":"The schema for the Output of the model. You must pass the word JSON in the prompt. If left blank, JSON mode will be disabled.","title_case":false,"type":"dict","_input_type":"DictInput"},"seed":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":1,"name":"seed","display_name":"Seed","advanced":true,"dynamic":false,"info":"The seed controls the reproducibility of the job.","title_case":false,"type":"int","_input_type":"IntInput"},"stream":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","title_case":false,"type":"bool","_input_type":"BoolInput"},"system_message":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"system_message","display_name":"System Message","advanced":true,"input_types":["Message"],"dynamic":false,"info":"System message to pass to the model.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"temperature":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"0","name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","title_case":false,"type":"float","_input_type":"FloatInput","load_from_db":false}},"description":"Generates text using OpenAI LLMs.","icon":"OpenAI","base_classes":["LanguageModel","Message"],"display_name":"OpenAI","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"text_response","value":"__UNDEFINED__","cache":true},{"types":["LanguageModel"],"selected":"LanguageModel","name":"model_output","display_name":"Language Model","method":"build_model","value":"__UNDEFINED__","cache":true}],"field_order":["input_value","system_message","stream","max_tokens","model_kwargs","json_mode","output_schema","model_name","openai_api_base","api_key","temperature","seed"],"beta":false,"edited":false},"id":"OpenAIModel-XithD","description":"Generates text using OpenAI LLMs.","display_name":"OpenAI"},"selected":false,"width":384,"height":639,"positionAbsolute":{"x":2526.323037290282,"y":545.9205179621795},"dragging":false},{"id":"LangWatchEvaluatorComponent-hE3uJ","type":"genericNode","position":{"x":2985.877286812016,"y":536.8362818140122},"data":{"type":"LangWatchEvaluatorComponent","node":{"template":{"_type":"Component","context_data":{"trace_as_input":true,"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"context_data","display_name":"RAG Search Results (opcional)","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to be used as context for evaluation.","title_case":false,"type":"other","_input_type":"DataInput"},"answer":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"answer","display_name":"Chat Output","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Conecte seu chat output.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"import re\r\nfrom langflow.custom import Component\r\nfrom langflow.inputs import MessageTextInput, DataInput\r\nfrom langflow.schema.message import Message\r\nfrom langflow.template import Output\r\nfrom langflow.schema import Data\r\nimport langwatch\r\nimport os\r\n\r\nos.environ[\"LANGWATCH_API_KEY\"] = \"<your LANGWATCH_API_KEY>\"\r\n\r\nclass LangWatchEvaluatorComponent(Component):\r\n    display_name = \"LangWatch Evaluator\"\r\n    description = \"Evaluates a question-answer pair using LangWatch and provides a trace URL.\"\r\n    icon = \"view\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"question\",\r\n            display_name=\"Chat Input\",\r\n            info=\"Conecte o seu chat input.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"answer\",\r\n            display_name=\"Chat Output\",\r\n            info=\"Conecte seu chat output.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"ground_truth\",\r\n            display_name=\"Resposta Correta\",\r\n            info=\"A resposta correta fornecida.\",\r\n        ),\r\n        DataInput(\r\n            name=\"context_data\",\r\n            display_name=\"RAG Search Results (opcional)\",\r\n            info=\"The data to be used as context for evaluation.\",\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_email\",\r\n            display_name=\"User Email\",\r\n            info=\"The user ID for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_name\",\r\n            display_name=\"Participant Name\",\r\n            info=\"Full name for identification in the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"user_cpf\",\r\n            display_name=\"Participant CPF\",\r\n            info=\"CPF for identification in for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"question_id\",\r\n            display_name=\"Question ID\",\r\n            info=\"The question ID for the trace metadata.\",\r\n            advanced=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Veja o resultado >\", name=\"trace_url\", method=\"evaluate\"),\r\n    ]\r\n\r\n    async def evaluate(self) -> Message:\r\n        question = self.question\r\n        answer = self.answer\r\n        ground_truth = self.ground_truth\r\n        context_data = self.context_data\r\n        user_email = self.user_email if self.user_email else \"\"\r\n        question_id = self.question_id if self.question_id else \"\"\r\n        user_name = self.user_name if self.user_name else \"\"\r\n        user_cpf = self.user_cpf if self.user_cpf else \"\"\r\n\r\n        # Validate email if provided\r\n        if user_email and not self.validate_email(user_email):\r\n            raise ValueError(f\"Invalid email address: {user_email}\")\r\n\r\n        # Validate CPF if provided\r\n        if user_cpf and not self.validate_cpf(user_cpf):\r\n            raise ValueError(f\"Invalid CPF: {user_cpf}\")\r\n\r\n        langwatch.api_key = \"<your LANGWATCH_API_KEY>\"\r\n\r\n        trace = langwatch.trace(\r\n            metadata={\r\n                \"user_id\": user_email,\r\n                \"question_id\": question_id,\r\n                \"user_name\": user_name,\r\n                \"user_cpf\": user_cpf\r\n            },\r\n            expected_output=ground_truth\r\n        )\r\n        \r\n        contexts = [item.text.replace(\"\\t\", \" \").replace(\"\\n\", \" \") for item in context_data[:5]] if context_data else []\r\n        rag_span = trace.span(type=\"rag\", name=\"LangWatch Evaluator\", input=question, contexts=contexts, output=answer)\r\n        rag_span.end()\r\n\r\n        trace.send_spans()\r\n\r\n        public_url = trace.share()\r\n        print(\"See the trace at:\", public_url)\r\n\r\n        self.status = f\"Enviado com sucesso. visite URL para ver o resultado: {public_url}\"\r\n        message = Message(text=public_url)\r\n        return message\r\n        \r\n    def validate_email(self, email):\r\n        pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\r\n        return re.match(pattern, email) is not None\r\n\r\n    def validate_cpf(self, cpf):\r\n        if not re.match(r'^(?!(\\d)\\1{10})\\d{9}[\\d]{2}$', cpf):\r\n            return False\r\n\r\n        total = sum(int(cpf[i]) * (10 - i) for i in range(9))\r\n        check1 = (total * 10 % 11) % 10\r\n\r\n        total = sum(int(cpf[i]) * (11 - i) for i in range(10))\r\n        check2 = (total * 10 % 11) % 10\r\n\r\n        return cpf[-2:] == f\"{check1}{check2}\"","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"ground_truth":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"ground_truth","display_name":"Resposta Correta","advanced":false,"input_types":["Message"],"dynamic":false,"info":"A resposta correta fornecida.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"question":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"question","display_name":"Chat Input","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Conecte o seu chat input.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"question_id":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"question_id","display_name":"Question ID","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The question ID for the trace metadata.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"user_cpf":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"user_cpf","display_name":"Participant CPF","advanced":true,"input_types":["Message"],"dynamic":false,"info":"CPF for identification in for the trace metadata.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"user_email":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"user_email","display_name":"User Email","advanced":true,"input_types":["Message"],"dynamic":false,"info":"The user ID for the trace metadata.","title_case":false,"type":"str","_input_type":"MessageTextInput"},"user_name":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"user_name","display_name":"Participant Name","advanced":true,"input_types":["Message"],"dynamic":false,"info":"Full name for identification in the trace metadata.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Evaluates a question-answer pair using LangWatch and provides a trace URL.","icon":"view","base_classes":["Message"],"display_name":"Langwatch Evaluator","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"trace_url","display_name":"Veja o resultado >","method":"evaluate","value":"__UNDEFINED__","cache":true}],"field_order":["question","answer","ground_truth","context_data","user_email","user_name","user_cpf","question_id"],"beta":false,"edited":true},"id":"LangWatchEvaluatorComponent-hE3uJ"},"selected":true,"width":384,"height":589,"positionAbsolute":{"x":2985.877286812016,"y":536.8362818140122},"dragging":false},{"id":"RecursiveSplitText_custom-HfhsH","type":"genericNode","position":{"x":-497.4253234750934,"y":-344.49525091205214},"data":{"type":"RecursiveSplitText_custom","node":{"template":{"_type":"Component","data_inputs":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"data_inputs","display_name":"Data Inputs","advanced":false,"input_types":["Data"],"dynamic":false,"info":"The data to split.","title_case":false,"type":"other","_input_type":"HandleInput"},"chunk_overlap":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"0","name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"Number of characters to overlap between chunks.","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"chunk_size":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"1000","name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"The maximum number of characters in each chunk.","title_case":false,"type":"int","_input_type":"IntInput","load_from_db":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List\r\n\r\nfrom langchain_text_splitters import CharacterTextSplitter, RecursiveCharacterTextSplitter\r\n\r\nfrom langflow.custom import Component\r\nfrom langflow.io import HandleInput, IntInput, MessageTextInput, Output\r\nfrom langflow.schema import Data\r\nfrom langflow.utils.util import unescape_string\r\nfrom langchain_experimental.text_splitter import SemanticChunker\r\nfrom langchain_openai.embeddings import OpenAIEmbeddings\r\n\r\n\r\nclass SplitTextComponent(Component):\r\n    display_name: str = \"Custom recursive Split Text\"\r\n    description: str = \"Recursive Split text into chunks based on specified criteria.\"\r\n    icon = \"scissors-line-dashed\"\r\n    name = \"RecursiveSplitText_custom\"\r\n\r\n    inputs = [\r\n        HandleInput(\r\n            name=\"data_inputs\",\r\n            display_name=\"Data Inputs\",\r\n            info=\"The data to split.\",\r\n            input_types=[\"Data\"],\r\n            is_list=True,\r\n        ),\r\n        IntInput(\r\n            name=\"chunk_overlap\",\r\n            display_name=\"Chunk Overlap\",\r\n            info=\"Number of characters to overlap between chunks.\",\r\n            value=200,\r\n        ),\r\n        IntInput(\r\n            name=\"chunk_size\",\r\n            display_name=\"Chunk Size\",\r\n            info=\"The maximum number of characters in each chunk.\",\r\n            value=1000,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"separator\",\r\n            display_name=\"Separator\",\r\n            info=\"The character to split on. Defaults to newline.\",\r\n            value=\"\\n\\n\",\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\r\n    ]\r\n\r\n    def _docs_to_data(self, docs):\r\n        data = []\r\n        \r\n        for doc in docs:\r\n            metadata = doc.metadata if doc.metadata else {}\r\n            data.append(Data(text=doc.page_content, data={'file_path':'', 'text':doc.page_content}))\r\n        return data\r\n\r\n    def split_text(self) -> List[Data]:\r\n        documents = []\r\n        for _input in self.data_inputs:\r\n            if isinstance(_input, Data):\r\n                documents.append(_input.to_lc_document())\r\n        \r\n        text_splitter = RecursiveCharacterTextSplitter(\r\n                separators=[\r\n                    \"\\n\\n\",\r\n                    \".\",\r\n                ],\r\n                chunk_overlap=self.chunk_overlap,\r\n                chunk_size=self.chunk_size,\r\n                length_function=len,\r\n                is_separator_regex=False,\r\n            )\r\n                    \r\n        # Assuming documents are transformed into text content for chunking\r\n        texts = [doc.page_content for doc in documents]\r\n        docs = text_splitter.create_documents(texts)\r\n        \r\n        data = self._docs_to_data(docs)\r\n        self.status = data\r\n        return data","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"separator":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"\\n\\n","name":"separator","display_name":"Separator","advanced":false,"input_types":["Message"],"dynamic":false,"info":"The character to split on. Defaults to newline.","title_case":false,"type":"str","_input_type":"MessageTextInput"}},"description":"Recursive Split text into chunks based on specified criteria.","icon":"scissors-line-dashed","base_classes":["Data"],"display_name":"Split Text","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Data"],"selected":"Data","name":"chunks","display_name":"Chunks","method":"split_text","value":"__UNDEFINED__","cache":true}],"field_order":["data_inputs","chunk_overlap","chunk_size","separator"],"beta":false,"edited":true,"official":false},"id":"RecursiveSplitText_custom-HfhsH"},"selected":false,"width":384,"height":573,"positionAbsolute":{"x":-497.4253234750934,"y":-344.49525091205214},"dragging":false}],"edges":[{"source":"OpenAIEmbeddings-iXkjv","sourceHandle":"{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-iXkjvœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}","target":"Chroma-en1gy","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œChroma-en1gyœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"embedding","id":"Chroma-en1gy","inputTypes":["Embeddings"],"type":"other"},"sourceHandle":{"dataType":"OpenAIEmbeddings","id":"OpenAIEmbeddings-iXkjv","name":"embeddings","output_types":["Embeddings"]}},"id":"reactflow__edge-OpenAIEmbeddings-iXkjv{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-iXkjvœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-en1gy{œfieldNameœ:œembeddingœ,œidœ:œChroma-en1gyœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}","className":""},{"source":"ChatInput-oOdRG","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-oOdRGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Chroma-8H72t","targetHandle":"{œfieldNameœ:œsearch_queryœ,œidœ:œChroma-8H72tœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"search_query","id":"Chroma-8H72t","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-oOdRG","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-oOdRG{œdataTypeœ:œChatInputœ,œidœ:œChatInput-oOdRGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Chroma-8H72t{œfieldNameœ:œsearch_queryœ,œidœ:œChroma-8H72tœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"Chroma-8H72t","sourceHandle":"{œdataTypeœ:œChromaœ,œidœ:œChroma-8H72tœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}","target":"ParseData-qe6th","targetHandle":"{œfieldNameœ:œdataœ,œidœ:œParseData-qe6thœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data","id":"ParseData-qe6th","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"Chroma","id":"Chroma-8H72t","name":"search_results","output_types":["Data"]}},"id":"reactflow__edge-Chroma-8H72t{œdataTypeœ:œChromaœ,œidœ:œChroma-8H72tœ,œnameœ:œsearch_resultsœ,œoutput_typesœ:[œDataœ]}-ParseData-qe6th{œfieldNameœ:œdataœ,œidœ:œParseData-qe6thœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""},{"source":"ChatInput-oOdRG","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-oOdRGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-z2aEz","targetHandle":"{œfieldNameœ:œquestionœ,œidœ:œPrompt-z2aEzœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"question","id":"Prompt-z2aEz","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-oOdRG","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-oOdRG{œdataTypeœ:œChatInputœ,œidœ:œChatInput-oOdRGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-z2aEz{œfieldNameœ:œquestionœ,œidœ:œPrompt-z2aEzœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"ParseData-qe6th","sourceHandle":"{œdataTypeœ:œParseDataœ,œidœ:œParseData-qe6thœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}","target":"Prompt-z2aEz","targetHandle":"{œfieldNameœ:œcontextœ,œidœ:œPrompt-z2aEzœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"context","id":"Prompt-z2aEz","inputTypes":["Message","Text"],"type":"str"},"sourceHandle":{"dataType":"ParseData","id":"ParseData-qe6th","name":"text","output_types":["Message"]}},"id":"reactflow__edge-ParseData-qe6th{œdataTypeœ:œParseDataœ,œidœ:œParseData-qe6thœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Prompt-z2aEz{œfieldNameœ:œcontextœ,œidœ:œPrompt-z2aEzœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}","className":""},{"source":"OpenAIEmbeddings-eNpUU","sourceHandle":"{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-eNpUUœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}","target":"Chroma-8H72t","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œChroma-8H72tœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"embedding","id":"Chroma-8H72t","inputTypes":["Embeddings"],"type":"other"},"sourceHandle":{"dataType":"OpenAIEmbeddings","id":"OpenAIEmbeddings-eNpUU","name":"embeddings","output_types":["Embeddings"]}},"id":"reactflow__edge-OpenAIEmbeddings-eNpUU{œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-eNpUUœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-8H72t{œfieldNameœ:œembeddingœ,œidœ:œChroma-8H72tœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}","className":""},{"source":"Prompt-z2aEz","sourceHandle":"{œdataTypeœ:œPromptœ,œidœ:œPrompt-z2aEzœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}","target":"OpenAIModel-XithD","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-XithDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"OpenAIModel-XithD","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"Prompt","id":"Prompt-z2aEz","name":"prompt","output_types":["Message"]}},"id":"reactflow__edge-Prompt-z2aEz{œdataTypeœ:œPromptœ,œidœ:œPrompt-z2aEzœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-XithD{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-XithDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"ChatInput-oOdRG","sourceHandle":"{œdataTypeœ:œChatInputœ,œidœ:œChatInput-oOdRGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}","target":"LangWatchEvaluatorComponent-hE3uJ","targetHandle":"{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-hE3uJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"question","id":"LangWatchEvaluatorComponent-hE3uJ","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"ChatInput","id":"ChatInput-oOdRG","name":"message","output_types":["Message"]}},"id":"reactflow__edge-ChatInput-oOdRG{œdataTypeœ:œChatInputœ,œidœ:œChatInput-oOdRGœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-hE3uJ{œfieldNameœ:œquestionœ,œidœ:œLangWatchEvaluatorComponent-hE3uJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"OpenAIModel-XithD","sourceHandle":"{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-XithDœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}","target":"LangWatchEvaluatorComponent-hE3uJ","targetHandle":"{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-hE3uJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"answer","id":"LangWatchEvaluatorComponent-hE3uJ","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"OpenAIModel","id":"OpenAIModel-XithD","name":"text_output","output_types":["Message"]}},"id":"reactflow__edge-OpenAIModel-XithD{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-XithDœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-LangWatchEvaluatorComponent-hE3uJ{œfieldNameœ:œanswerœ,œidœ:œLangWatchEvaluatorComponent-hE3uJœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"LangWatchEvaluatorComponent-hE3uJ","sourceHandle":"{œdataTypeœ:œLangWatchEvaluatorComponentœ,œidœ:œLangWatchEvaluatorComponent-hE3uJœ,œnameœ:œtrace_urlœ,œoutput_typesœ:[œMessageœ]}","target":"ChatOutput-bIIcV","targetHandle":"{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-bIIcVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-bIIcV","inputTypes":["Message"],"type":"str"},"sourceHandle":{"dataType":"LangWatchEvaluatorComponent","id":"LangWatchEvaluatorComponent-hE3uJ","name":"trace_url","output_types":["Message"]}},"id":"reactflow__edge-LangWatchEvaluatorComponent-hE3uJ{œdataTypeœ:œLangWatchEvaluatorComponentœ,œidœ:œLangWatchEvaluatorComponent-hE3uJœ,œnameœ:œtrace_urlœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-bIIcV{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-bIIcVœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}","className":""},{"source":"File-Lv4aN","sourceHandle":"{œdataTypeœ:œFileœ,œidœ:œFile-Lv4aNœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}","target":"RecursiveSplitText_custom-HfhsH","targetHandle":"{œfieldNameœ:œdata_inputsœ,œidœ:œRecursiveSplitText_custom-HfhsHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"data_inputs","id":"RecursiveSplitText_custom-HfhsH","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"File","id":"File-Lv4aN","name":"data","output_types":["Data"]}},"id":"reactflow__edge-File-Lv4aN{œdataTypeœ:œFileœ,œidœ:œFile-Lv4aNœ,œnameœ:œdataœ,œoutput_typesœ:[œDataœ]}-RecursiveSplitText_custom-HfhsH{œfieldNameœ:œdata_inputsœ,œidœ:œRecursiveSplitText_custom-HfhsHœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""},{"source":"RecursiveSplitText_custom-HfhsH","sourceHandle":"{œdataTypeœ:œRecursiveSplitText_customœ,œidœ:œRecursiveSplitText_custom-HfhsHœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}","target":"Chroma-en1gy","targetHandle":"{œfieldNameœ:œingest_dataœ,œidœ:œChroma-en1gyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"ingest_data","id":"Chroma-en1gy","inputTypes":["Data"],"type":"other"},"sourceHandle":{"dataType":"RecursiveSplitText_custom","id":"RecursiveSplitText_custom-HfhsH","name":"chunks","output_types":["Data"]}},"id":"reactflow__edge-RecursiveSplitText_custom-HfhsH{œdataTypeœ:œRecursiveSplitText_customœ,œidœ:œRecursiveSplitText_custom-HfhsHœ,œnameœ:œchunksœ,œoutput_typesœ:[œDataœ]}-Chroma-en1gy{œfieldNameœ:œingest_dataœ,œidœ:œChroma-en1gyœ,œinputTypesœ:[œDataœ],œtypeœ:œotherœ}","className":""}],"viewport":{"x":-707.6576962199529,"y":44.79445993262698,"zoom":0.5077612583240616}},"description":"Visit https://docs.langflow.org/tutorials/rag-with-astradb for a detailed guide of this project.\nThis project give you both Ingestion and RAG in a single file. You'll need to visit https://astra.datastax.com/ to create an Astra DB instance, your Token and grab an API Endpoint.\nRunning this project requires you to add a file in the Files component, then define a Collection Name and click on the Play icon on the Astra DB component. \n\nAfter the ingestion ends you are ready to click on the Run button at the lower left corner and start asking questions about your data.","name":"SEMANA2_CAMPEAO","last_tested_version":"1.0.13","endpoint_name":null,"is_component":false}
